# Core environment makefile definitions.  This is included by *all* makefiles.

# Define the default target straight away to avoid accidentally picking up
# the wrong target.
default:


# Note that the build root must be an absolute path.  
BUILD_ROOT = /scratch/tmp/rootfs

BINUTILS_DIR = /dls_sw/targetOS/x-tools/$(TOOLCHAIN_VERSION)/$(COMPILER_PREFIX)
TAR_DIRS = /dls_sw/prod/targetOS/tar-files /dls_sw/work/targetOS/tar-files


ifndef NOLOCAL
-include $(TOP)/CONFIG.local
endif

ifndef TARGET
$(error Must specify TARGET)
endif
configdir = $(TOP)/configs/$(TARGET)
include $(configdir)/CONFIG
-include $(configdir)/BOOT_$(BOOT)

ifndef NOLOCAL
-include $(TOP)/CONFIG.$(TARGET).local
endif


TOOLKIT_BIN = $(BUILD_ROOT)/toolkit/bin

BUILD_TARGET = $(BUILD_ROOT)/$(TARGET)
sysroot = $(BUILD_TARGET)/rootfs
scripts = $(TOP)/scripts/

# Where install places the list of files it has installed.
install_list = $(BUILD_TARGET)/install_list


# Support scripts for installation.
install    = \
    $(call EXPORT, sysroot COMPILER_PREFIX install_list) $(scripts)install
install-files = $(call EXPORT, sysroot) $(scripts)install-files
useradd       = $(call EXPORT, sysroot) $(scripts)useradd
groupadd      = $(call EXPORT, sysroot) $(scripts)groupadd
startup       = $(call EXPORT, sysroot) $(scripts)startup 
first-time    = $(call EXPORT, sysroot) $(scripts)first-time 

# Our local autoconf -- probably redundant... 
AUTOCONF = $(TOOLKIT_BIN)/autoconf


# Passing makefile exports through is a bit tiresome.  We could mark our
# symbols with export -- but that means *every* command gets them, and I
# don't like that.  This macro instead just exports the listed symbols into a
# called function, designed to be called like:
#
#	$(call EXPORT,$(EXPORTS)) script
#
# Unfortunately, for essentially unavoidable reasons, if any exported
# variable contains a ' then the generated command will probably fail
# miserably!
EXPORT = $(foreach var,$(1),$(var)='$($(var))')


export PATH := $(TOOLKIT_BIN):$(BINUTILS_DIR)/bin:$(PATH)
