PYTHON_PYC_ONLY ?= 0


TAR_EXTENSION = .tgz

Python_VERSION ?= 2.7.9

MD5_SUM_2.7.9 = 5eebcaa0030dc4061156d3429657fb83

PATCHES_2.7.9 = \
    001-remove-host-header-path.patch \
    002-fix-get-python-inc.patch \
    004-sysconfigdata-install-location.patch \
    005-pyc-pyo-conditional.patch \
    006-cross-compile-getaddrinfo.patch \
    007-disable-extensions.patch \
    008-distutils-use-python-sysroot.patch \
    009-no-termcap-host-path.patch \
    010-fix-python-config.patch \
    011-remove-python-symlink.patch \
    012-support-library-path-old-compilers.patch \
    013-dont-add-multiarch-path.patch \
    014-abort-on-failed-modules.patch \
    015-fix-sqlite-without-threads.patch \
    016-serial-ioctl-workaround.patch \
    017-distutils-scripts-dont-adjust-shebang.patch \
    100-optional-test-modules.patch \
    101-optional-pydoc.patch \
    102-optional-2to3.patch \
    103-optional-sqlite.patch \
    104-optional-tk.patch \
    105-optional-curses.patch \
    106-optional-expat.patch \
    107-optional-codecs-cjk.patch \
    108-optional-nis.patch \
    109-optional-unicodedata.patch \
    110-optional-db.patch \
    111-optional-ssl.patch \
    112-optional-bzip2.patch \
    113-optional-zlib.patch \
    114-remove-idle-editor.patch \
    115-optional-ossaudiodev.patch \
    read-only-configtest.patch

# This is needed to make sure the Python build process doesn't try to regenerate
# those files with the pgen program. Otherwise, it builds pgen for the target,
# and tries to run it on the host.
patch-extra = touch $(srcdir)/Include/graminit.h $(srcdir)/Python/graminit.c


# Python needs itself to be built, so in order to cross-compile Python, we need
# to build a host Python first. This host Python is also installed in
# $(HOST_DIR), as it is needed when cross-compiling third-party Python modules.
O-target = $(O)/target
O-build = $(O)/build

# This is a temporary installation directory where we clean up the final install
# before making it available to the target.
O-install = $(O)/install


HOST_PYTHON_CONF_OPTS = \
    --disable-shared \
    --disable-sqlite3 \
    --disable-tk \
    --disable-curses \
    --disable-codecs-cjk \
    --disable-nis \
    --enable-unicodedata \
    --disable-dbm \
    --disable-gdbm \
    --disable-bsddb \
    --disable-test-modules \
    --disable-bz2 \
    --disable-ssl \
    --disable-ossaudiodev \
    --disable-pyo-build


TARGET_PYTHON_CONF_OPTS = \
    ac_cv_have_long_long_format=yes \
    ac_cv_file__dev_ptmx=yes \
    ac_cv_file__dev_ptc=no \
    ac_cv_working_tzset=yes \
    --enable-shared \
    --without-doc-strings \
    --with-system-ffi \
    --disable-bz2 \
    --disable-codecs-cjk \
    --disable-dbm \
    --disable-gdbm \
    --disable-ipv6 \
    --disable-lib2to3 \
    --disable-nis \
    --disable-ossaudiodev \
    --disable-pydoc \
    --disable-pyo-build \
    --disable-sqlite3 \
    --disable-test-modules \
    --disable-tk \
    --disable-zlib


# Ensure that libraries are available to build
CPPFLAGS += -I$(LIB_PREFIX)/usr/include
LDFLAGS  += -L$(LIB_PREFIX)/usr/lib

build:
	mkdir -p $(O-target) $(O-build)

        # ----------------------------------------------------------------------
        # First build a hosted version of python in $(O-build)

        # Rebuild configure script
	ln -s $(srcdir)/configure.ac $(O-build)
	cd $(O-build)  &&  autoreconf -i -f

        # Configure the build so we can make a local build.  For this we
        # can use the stock configuration.
	cd $(O-build)  &&  \
        ./configure --srcdir=$(srcdir) --prefix=$(TARGET_TOOLKIT) \
            LDFLAGS=-Wl,--enable-new-dtags $(HOST_PYTHON_CONF_OPTS)
	make -j1 -C $(O-build)

	make -C $(O-build) install


        # ----------------------------------------------------------------------
        # Now configure target python

	ln -s $(srcdir)/configure.ac $(O-target)
	cd $(O-target)  &&  autoreconf -i -f

        # Configure the target.
	cd $(O-target)  &&  \
        ./configure --srcdir=$(srcdir) --prefix=/usr \
            --host=$(COMPILER_PREFIX) --build=$(BUILD_TYPE) \
            CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' \
            $(TARGET_PYTHON_CONF_OPTS)

        # ----------------------------------------------------------------------
        # Finally complete the build and create a local install

	make -C $(O-target)
	make -C $(O-target) DESTDIR=$(O-install) install
	rm -rf $(O-install)/usr/include $(O-install)/usr/share
ifeq ($(PYTHON_PYC_ONLY),1)
	find $(O-install)/usr/lib/python2.7 -name '*.py' -exec rm -f {} +
endif


install:
	tar c -C $(O-install) . | tar x -C $(sysroot)


install-lib:
	make -C $(O-target) install DESTDIR=$(LIB_PREFIX)


# Patches and configuration taken from buildroot python package

# vim: set filetype=make:
