# This is the set of rules which performs the build of a particular package.
# These rules are included at the end of PACKAGE_MAKE, just to help manage
# the structure of the build system.


default: do-build

ifeq ($(version),local)
# Local builds are handled a little oddly: we need to turn the make file
# around so that it builds out of $(O), targeting sources in $(packagedir).
# For local there is no srcdir, so nothing to untar.
srcdir = $(packagedir)

untar:

build:
	$(MAKE) -C $(O) -f $(packagedir)/CONFIG build-local \
            I=$(I) VPATH=$(packagedir) CC=$(CROSS_COMPILE)gcc

else
# For normal builds we have to extract and possibly patch the sources.

# Patches are found in a patches subdirectory of the component configuration.
PATCHES := $(patsubst %,$(packagedir)/patches/%,$(PATCHES))

$(srcdir):
	mkdir -p $(SOURCE_ROOT)
	$(scripts)/extract-tar \
            '$(SOURCE_ROOT)' '$(TAR_FILE)' '$(MD5_SUM)' $(TAR_DIRS)
	# Do any extra work required to get files into the right position.
	$(untar-extra)

	for patch in $(PATCHES); do \
            patch -p1 -d $(srcdir) <$$patch  ||  exit 1; \
        done
	$(patch-extra)
        # Finally enforce read only source tree!
	chmod -R a-w $(srcdir)

untar: $(srcdir)

endif


pre-toolkit: $(srcdir)
	rm -rf $(toolkit_O)
	mkdir -p $(toolkit_O) $(TARGET_TOOLKIT)

toolkit: pre-toolkit

$(toolkit_O): toolkit
ifndef KEEP_BUILD
	rm -rf $(toolkit_O)
	touch $(toolkit_O)
endif

do-toolkit: $(toolkit_O)

pre-build:
	rm -rf $(build_O) $(build_I)
	mkdir -p $(build_O) $(build_I) $(PKG_CONFIG_PATH)

build: $(srcdir) $(toolkit_O) pre-build

do-build: build
ifndef KEEP_BUILD
	rm -rf $(build_O)
endif

clean:
	rm -rf $(build_O)
	rm -rf $(install_I)

clean-src:
	-chmod -R +w $(srcdir)
	rm -rf $(srcdir)

clean-all: clean clean-src
	rm -rf $(toolkit_O)

.PHONY: do-build untar pre-build build do-toolkit pre-toolkit toolkit
.PHONY: clean clean-src clean-all

# vim: set filetype=make:
