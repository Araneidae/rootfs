# Makefile for building a single package.  Must be called with PACKAGE
# defined.

include $(ROOTFS_TOP)/scripts/makefiles/COMMON
include $(makefiles)/TARGET_COMMON
include $(makefiles)/PACKAGE_COMMON

# This should be called as part of a package build recipe for a library
# component to install the pkg-config file for the library.
install-pkg-config = \
    $(call EXPORT,PKG_CONFIG_PATH I packagedir) \
        $(scripts)/install-pkg-config $(PACKAGE) $($(PACKAGE)_VERSION)

# Sets name to $name_$version if define or uses the default value.  Call thus:
#
#   $(call SET_VERSION,name,default)
#
define _SET_VERSION
    ifdef $1_$(version)
        $1 := $($1_$(version))
    else ifdef $1
        # $1 is set and there is no override
    else
        $1 := $2
    endif
endef
SET_VERSION = $(eval $(_SET_VERSION))

version = $($(PACKAGE)_VERSION)


# Where the sources are placed and where the package will be built.
srcdir = $(SOURCE_ROOT)/$(SOURCE_DIR_NAME)

# Build type needed for --build argument to many ./configure scripts
BUILD_TYPE = $(shell $(scripts)/config.guess)



# Special definitions for Python building.  Note that the prefix and sysroot
# values must agree with what is set in the installed Python.pc file.
PYTHON2_ROOT = $(call pkg-config,Python --variable=prefix)
PYTHON2_SYSCONFIGDATA_NAME = \
    $(shell basename -s .py $(wildcard $(PYTHON2_ROOT)/lib/python2.7/_sysconfigdata__linux_*.py))
PYTHON2_BUILD_OPTS =
PYTHON2_INSTALL_OPTS = --prefix=$(I)/usr
PYTHON2_SETUP_ENV = \
    CC=$(CROSS_COMPILE)gcc \
    LD=$(CROSS_COMPILE)ld \
    LDSHARED='$(CROSS_COMPILE)gcc -shared' \
    PYTHONPATH='$(PYTHON2_ROOT)/lib/python2.7' \
    _PYTHON_SYSCONFIGDATA_NAME='$(PYTHON2_SYSCONFIGDATA_NAME)' \
    _python_sysroot=$(PYTHON2_ROOT) \
    _python_prefix=/ \
    _python_exec_prefix=/
python2-build = \
    cd $(srcdir)  &&  \
    $(PYTHON2_SETUP_ENV) python3 setup.py build -b $O $(PYTHON2_BUILD_OPTS) \
    install $(PYTHON2_INSTALL_OPTS)

PYTHON3_ROOT = $(call pkg-config,Python3 --variable=prefix)
PYTHON3_SYSCONFIGDATA_NAME = \
    $(shell basename -s .py $(wildcard $(PYTHON3_ROOT)/lib/python3.8/_sysconfigdata__linux_*.py))
PYTHON3_BUILD_OPTS =
PYTHON3_INSTALL_OPTS = --prefix=$(I)/usr
PYTHON3_SETUP_ENV = \
    CC=$(CROSS_COMPILE)gcc \
    LD=$(CROSS_COMPILE)ld \
    LDSHARED='$(CROSS_COMPILE)gcc -shared' \
    PYTHONPATH='$(PYTHON3_ROOT)/lib/python3.8' \
    _PYTHON_SYSCONFIGDATA_NAME=$(PYTHON3_SYSCONFIGDATA_NAME) \
    _python_sysroot=$(PYTHON3_ROOT) \
    _python_prefix=/ \
    _python_exec_prefix=/
python3-build = \
    cd $(srcdir)  &&  \
    $(PYTHON3_SETUP_ENV) python3 setup.py build -b $O $(PYTHON3_BUILD_OPTS) \
    install $(PYTHON3_INSTALL_OPTS)

PYTHON_ROOT = $(PYTHON$(SYSTEM_PYTHON)_ROOT)

define python-build
$(python$(SYSTEM_PYTHON)-build)
# Do we want this?
# ifeq ($(PYTHON_PYC_ONLY),1)
#    find $(I)/usr/lib -name '*.py' -exec rm -f {} +
# endif
endef

# Finally we can pull in the real package definitions and fire the
# appropriate rules.
include $(packagedir)/CONFIG


# All the following can be overridden in the CONFIG file we've just loaded, so
# now determine their values.

# Definitions specific to source extraction.  These can all be set in the
# package CONFIG file, either in general or for a specific package version.

# Source directory and package specification.  A little involved, as we want
# the extracted sources to be as uniform as possible, but individual source
# packages introduce their own variations.
$(call SET_VERSION,TAR_EXTENSION,.tar.bz2)
$(call SET_VERSION,SEPARATOR,-)
$(call SET_VERSION,TAR_SEPARATOR,$(SEPARATOR))
$(call SET_VERSION,SOURCE_SEPARATOR,$(SEPARATOR))
$(call SET_VERSION,TAR_FILE,\
    $(PACKAGE)$(TAR_SEPARATOR)$(version)$(TAR_EXTENSION))
$(call SET_VERSION,SOURCE_DIR_NAME,$(PACKAGE)$(SOURCE_SEPARATOR)$(version))
$(call SET_VERSION,untar-extra,@:)
$(call SET_VERSION,patch-extra,@:)

# Configuration of source file
$(call SET_VERSION,MD5_SUM)
$(call SET_VERSION,PATCHES)


# Allow package specific overrides of CFLAGS.
ifdef CFLAGS_$(PACKAGE)
CFLAGS = $(CFLAGS_$(PACKAGE))
endif

# Use LIB_DEPENDS to locate libraries if necessary.
ifdef LIB_DEPENDS
export LDFLAGS  += $(call pkg-config,$(LIB_DEPENDS) --libs)
export CPPFLAGS += $(call pkg-config,$(LIB_DEPENDS) --cflags)
endif

include $(makefiles)/PACKAGE_RULES

# vim: set filetype=make:
