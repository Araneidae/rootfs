# Script for building common environment needed for rootfs builder.

include $(ROOTFS_TOP)/scripts/makefiles/COMMON
# At this point the following symbols define where we will operate:
#
#   TOOLKIT_ROOT    This is where the toolkit will be built and installed
#   SOURCE_ROOT     Sources will be extracted here
#
#   TOOLKIT_BIN = $(TOOLKIT_ROOT)/bin
#       This is on the path, and is where the toolkit commands are found.

include $(makefiles)/TOOLKIT_DEFS


# The following trick is so that we can have default TAR_EXTENSION and
# SEPARATOR definitions, but override them for fakeroot.
SOURCE_NAME = $@-$($@_VERSION)
TAR_FILE    = $(if $($@_TAR_FILE),$($@_TAR_FILE),$(SOURCE_NAME).tar.bz2)
MD5_SUM     = $(MD5_SUM_$@_$($@_VERSION))

srcdir = $(SOURCE_ROOT)/$(SOURCE_NAME)
O      = $(TOOLKIT_ROOT)/build/$@

# All the components have a completely uniform build: basically untar,
# configure with local prefix, build and install.
$(TOOLKIT_COMPONENTS):  $(TOOLKIT_ROOT)
	$(scripts)/extract-tar $(SOURCE_ROOT) $(TAR_FILE) $(MD5_SUM) $(TAR_DIRS)
	chmod -R -w $(srcdir)

	mkdir -p $(O)
	cd $(O)  &&  $(srcdir)/configure --prefix=$(TOOLKIT_ROOT)
	$(MAKE) -C $(O) install
	$($@_POST_INSTALL)

$(TOOLKIT_ROOT):
	mkdir -p $(SOURCE_ROOT) $(TOOLKIT_ROOT)


default: toolkit

toolkit: $(TOOLKIT_COMPONENTS)


clean:
	rm -rf $(TOOLKIT_ROOT)

define force_rm
if [ -e $(srcdir) ]; then chmod -R +w $(srcdir) && rm -rf $(srcdir); fi

endef
clean-src:
	$(foreach @,$(TOOLKIT_COMPONENTS), $(force_rm))


clean-all: clean clean-src

.PHONY: toolkit clean clean-all clean-src $(TOOLKIT_COMPONENTS)

# vim: set filetype=make:
