# Top level make file, run from $(ROOTFS_TOP)/rootfs, used to assemble and
# possibly deploy the final build.

include $(ROOTFS_TOP)/scripts/makefiles/COMMON
include $(makefiles)/TARGET_COMMON

O = $(TARGET_ROOT)/image


# System dependencies: we can force a build of the toolkit and the packages
# if they've not already been built.  Unfortunately we don't have explicit
# dependencies between packages anywhere, we rely on them being built in
# order, and this ordering can be lost by this trick.
$(TOOLKIT_BIN):
	$(MAKE) -f $(makefiles)/TOOLKIT_MAKE


ALL_PACKAGES = $(patsubst %,$(STAGING_ROOT)/%,$(notdir $(PACKAGES)))


# Build dependency list to ensure packages are built in the right sequence.
$(TARGET_ROOT)/depends: $(configdir)/CONFIG
	mkdir -p $(TARGET_ROOT)
	$(MAKE) -s --no-print-directory -f $(makefiles)/ALL_PACKAGES depends >$@
include $(TARGET_ROOT)/depends

# Check for repeated package names, as this can cause problems.  Unfortunately,
# it's quite tricky to report *which* names are repeated, so we don't.
ifneq ($(words $(CHECK_PACKAGE_LIST)),$(words $(sort $(CHECK_PACKAGE_LIST))))
    $(error Repeated package names in PACKAGES)
endif


$(O):
	rm -rf $(O)
	mkdir -p $(O)
.PHONY: $(O)

$(O)/imagefile.cpio: $(TOOLKIT_BIN) $(ALL_PACKAGES) $(O)
	umask 22  &&  \
        $(MAKE) $@ -f $(makefiles)/SYSROOT_MAKE \
            $(call EXPORT,TARGET configdir)  || \
        rm -rf $(O)

imagefile: $(O)/imagefile.cpio
# Force rebuild of the image file, even if it already exists.
.PHONY: imagefile $(O)/imagefile.cpio


boot: $(O)/imagefile.cpio
ifdef BOOT
	$(MAKE) $@ -f $(makefiles)/BOOT_MAKE boot
endif
.PHONY: boot

default: boot

imagename:
	echo $(O)/imagefile.cpio

imagedir:
	echo $(O)

# vim: set filetype=make:
