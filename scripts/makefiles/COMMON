# Core environment makefile definitions.  This is included by *all*
# rootfs makefiles as their very first action.
#
# The following symbol must be defined by the calling environment:
#
#   ROOTFS_TOP
#       This points to the root of the rootfs tree.
#
# The following symbol may be overridden, but has a sensible default.
#
#   ROOTFS_CONFIG
#       This defaults to $(ROOTFS_TOP)/CONFIG.  This file can contain
#       overrides for other symbols.


# Define the default target straight away to avoid accidentally picking up
# the wrong target.
default:
.PHONY: default

# On certain systems (I'm looking at you, Ubuntu), the default shell /bin/sh
# is really a bit to strictly underpowered for some of our build scripts!
SHELL = /bin/bash


# Default paths that can be overridden by the CONFIG file.
ROOTFS_ROOT = /scratch/tmp/rootfs
SOURCE_ROOT = $(ROOTFS_ROOT)/src

TOOLKIT_ROOT = $(ROOTFS_ROOT)/toolkit
TOOLKIT_BIN = $(TOOLKIT_ROOT)/bin

ROOTFS_CONFIG ?= $(ROOTFS_TOP)/CONFIG

TAR_DIRS = /dls_sw/prod/targetOS/tar-files

BINUTILS_DIR = /dls_sw/targetOS/x-tools/$(TOOLCHAIN_VERSION)/$(COMPILER_PREFIX)
SYSROOT = $(BINUTILS_DIR)/$(COMPILER_PREFIX)/sys-root

-include $(ROOTFS_CONFIG)


export PATH := $(TOOLKIT_BIN):$(PATH)

# Some convenience definitions.
scripts = $(ROOTFS_TOP)/scripts
makefiles = $(scripts)/makefiles

# Function for safely quoting a string before exposing it to the shell.
# Wraps string in quotes, and escapes all internal quotes.  Invoke as
#
#   $(call SAFE_QUOTE,string to expand)
#
SAFE_QUOTE = '$(subst ','\'',$(1))'

# )' (Gets vim back in sync)

# Passing makefile exports through is a bit tiresome.  We could mark our
# symbols with export -- but that means *every* command gets them, and I
# don't like that.  This macro instead just exports the listed symbols into a
# called function, designed to be called like:
#
#       $(call EXPORT,$(EXPORTS)) script
#
EXPORT = $(foreach var,$(1),$(var)=$(call SAFE_QUOTE,$($(var))))


# Sometimes we allow a parameter to be specified either as a name which we
# look up in a predefined directory, or as a fixed path.  This macro
# encapsulates this, designed to be called thus:
#
#   $(call COMPUTE_PATH,param_name,path_name,default_dir)
#
# Here param_name is the name of the parameter that may be updated, path_name
# will be updated with the full path to the identifed component, and
# default_dir is the default base directory (relative to $(ROOTFS_TOP)).
#
# This supports three ways of defining param_name:
#
#   1. param_name=name
#       In this case path_name is set to default_dir/name.  This is the
#       normal case when a default configuration can be used.
#   2. param_name=/path/to/name
#       In this case path_name is set to /path/to/name and param_name is
#       forced to name.  This is the case when an external configuration is
#       used.
#   3. param_name=name path_name=/path/to/dir
#       In this case the parameters are unchanged.  This is for use when an
#       external configuration is being used, but the path name is not in the
#       right format.
define _COMPUTE_PATH
    ifndef $1
        $$(error Must specify first parameter)
    endif
    ifeq (,$$(findstring /,$$($1)))
        # $1 is not a path; if $2 is not set then set to the default.
        ifndef $2
            $2 := $$(ROOTFS_TOP)/$3/$$($1)
        endif
    else
        # $1 defines a path.  Split into two to set $1 and $2 together.
        ifdef $2
            $$(error Definition of $2 conflicts with $1)
        endif
        $2 := $$($1)
        override $1 := $$(notdir $$($1))
        ifndef $1
            $$(error $1 cannot end in /)
        endif
    endif
endef
COMPUTE_PATH = $(eval $(_COMPUTE_PATH))


# This is similar in intention to COMPUTE_PATH, but applies in this case to a
# parameter which either names a file to be included from a predifined
# directory, or else is a fixed path.  To be called thus:
#
#   $(call INCLUDE_DEFS,parameter,default_dir)
#
define _INCLUDE_DEFS
    ifndef $1
        $$(error Must specify $1)
    endif
    ifeq (,$$(findstring /,$$($1)))
        include $(ROOTFS_TOP)/$2/$$($1)
    else
        include $$($1)
    endif
endef
INCLUDE_DEFS = $(eval $(_INCLUDE_DEFS))

# vim: set filetype=make:
