# Build targets -- to be included at the end of the component make file

# Check that we've been given a version number by now!
ifndef $(COMPONENT)_VERSION
$(error Must specify $(COMPONENT)_VERSION)
endif

ifdef CFLAGS_$(COMPONENT)
CFLAGS = $(CFLAGS_$(COMPONENT))
endif

all: config build install-lib


ifeq ($(version),local)
# Local builds are handled a little oddly: we need to turn the make file
# around so that it builds out of $(O), targeting soruces in $(CURDIR).  For
# local there is no srcdir, so nothing to untar.

untar:

build:
	make -C $(O) -f $(CURDIR)/Makefile build-local \
            CURDIR=$(CURDIR) VPATH=$(CURDIR)

else
# For normal builds we have to extract and possibly patch the sources.

# Patch names are of the form PATCHES_<version> and should be placed in a
# patches subdirectory of the component configuration.
PATCHES = $(patsubst %,$(CURDIR)/patches/%,$(PATCHES_$(version)))

$(srcdir):
ifdef TAR_FILE
	mkdir -p $(SOURCE_ROOT) 
	$(scripts)extract-tar \
            '$(SOURCE_ROOT)' '$(TAR_FILE)' '$(MD5_SUM)' $(TAR_DIRS)
endif

	$(untar-extra)

ifneq ($(strip $(PATCHES)),)
	for patch in $(PATCHES); do \
            patch -p1 -d $(srcdir) <$$patch; \
        done
endif

untar: $(srcdir)

.PHONY: untar do-untar untar-extra patch

endif


$(O):
	mkdir -p $(O)

$(LIB_PREFIX):
	mkdir -p $(LIB_PREFIX)/include $(LIB_PREFIX)/lib $(LIB_PREFIX)/usr/lib


config: $(O) untar

build: $(O) 

install-lib: build $(LIB_PREFIX)


clean:
	rm -rf $(O)

clean-src: 
	rm -rf $(srcdir)

clean-all: clean clean-src
