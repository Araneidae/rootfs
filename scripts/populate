#!/bin/sh

#set -e
#shopt -s nullglob

# Simple populate script: simply populates from a hard-wired list.

TARGET="${1:?}"
BINUTILS_DIR="${2:?}"
PREFIX="${3:?}"


SYSROOT="$BINUTILS_DIR/$PREFIX/sys-root"
STRIP="$BINUTILS_DIR/bin/$PREFIX-strip"


SKELETON='
    bin dev etc lib sbin
    usr usr/bin usr/lib usr/sbin
    var var/log var/run'

LIB_FILES='
    ld
    ld-linux
    libc
    libgcc_s
    libm
    libpthread
    libresolv
    libnss_dns
    librt
    libstdc++'

USR_LIB_FILES='
    libncurses'

SO_FILES='.so .so.*'


create_skeleton()
{
    local dir
    for dir in $SKELETON; do
        mkdir -p "$TARGET/$dir"  ||  return
    done
}


do_strip()
{
    chmod +w "$target"  &&
    "$STRIP" "$target"
}


# Processes the file according to its type: the file is copied or linked, and
# stripped if necessary.
#
#   process_file file target-dir
#
process_file()
{
    local target="$2/$(basename "$1")"
    local link 
    if link="$(readlink "$1")"; then
        ln -s "$link" "$target"
    else
        cp "$1" "$target"  &&
        case "$(file -i "$1")" in
            *application/x-sharedlib*)  do_strip "$1" "$2" ;;
            *application/x-executable*) do_strip "$1" "$2" ;;
        esac  &&
        chmod -w "$target"
    fi
}

    
# Copies list of files into specified target directory
#
#   populate target-dir lib-list [suffixes]
#
populate()
{
    local dir="$1"
    local suffixes="$3"
    local prefix suffix file
#    mkdir -p "$TARGET/$dir"
    for prefix in $2; do
        if [ -n "$suffixes" ]; then
            local found=0
            for suffix in $suffixes; do
                for file in "$SYSROOT/$dir/$prefix"$suffix; do
                    if [ -e "$file" ]; then
                        process_file $file "$TARGET"/$dir || return
                        found=1
                    fi
                done
            done
            if ! ((found)); then
                echo -n File "$prefix"
                [ -n "$suffixes" ]  && echo -n "[$suffixes]"
                echo " not found"
                return 1
            fi
        else
            process_file "$SYSROOT/$dir/$prefix" "$TARGET"/$dir
        fi
    done
}


# Special hack to search /usr/lib for links to /lib.
link_usr_lib()
{
    local file link
#    mkdir -p "$TARGET/usr/lib"
    for file in "$SYSROOT/usr/lib"/*; do
        link="$(readlink "$file")"  &&
        grep -q '^\.\./\.\./lib' <<<"$link"  &&
        [ -e "$TARGET/usr/lib/$link" ]  &&
        ln -s "$link" "$TARGET/usr/lib/$(basename "$file")"  ||
        true
    done
}


create_skeleton  &&
populate lib "$LIB_FILES" "-2.7.so $SO_FILES"  &&
populate usr/lib "$USR_LIB_FILES" "$SO_FILES"  &&  link_usr_lib  &&

populate sbin ldconfig 
