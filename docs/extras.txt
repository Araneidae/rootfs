Extra Components
================

Rootfs Components
-----------------

The following ``extra'' components can be included in any rootfs build.

`bash`::
Web page: http://www.gnu.org/software/bash[]
+
The standard bash shell, but rather large.

`busybox`::
Web page: http://www.busybox.net/[]
+
Collection of basic utilities.  This provides pretty well everything needed to
build a complete system.

`dropbear`::
Web page: http://matt.ucc.asn.au/dropbear/dropbear.html[]
+
Small ssh server and client.

`lsof`::
Web page: http://people.freebsd.org/~abe/[]
+
Lists all open files.  Rather horrible to configure!

`mtd-utils`::
Web page: http://www.linux-mtd.infradead.org/source.html[]
+
Download from: ftp://ftp.infradead.org/pub/mtd-utils[]
+
Git repository: git://git.infradead.org/mtd-utils.git[]
+
Needed for jffs2 support.  We only build `flash_eraseall` and `flashcp`.

`nano`::
Web page: http://www.nano-editor.org/[]
+
Small editor

`nfs-utils`::
Web page: http://linux-nfs.org[] and http://nfs.sourceforge.net[]
+
Hopefully to fill in some missing busybox functions for NFS mounts.
This has been succesfully built (with a surprising amount of effort
required) but not yet installed or tried.
+
If we want to export an nfs filesystem we'll want this.

`ntp`::
Web page: http://www.ntp.org/[]
+
The definitive NTP clock synchronisation reference implementation.
Rather large, but very functional.

`ntpclient`::
Web page: http://doolittle.icarus.com/ntpclient/[]
+
Microscopic ntp client.
The writer of this also refers to xntpd, and links to a detailed man page,
but I can't find a download.
Probably too small to be useful, but here for testing.

`openntpd`::
Web page: http://www.openntpd.org/[]
+
OpenBSD based implementation of NTP.  Really quite a lot smaller than ntp,
bit more work to set up, and no status information available when it's 
running.  This last is not so good...

`portmap`::
Web page: http://neil.brown.name/portmap/[]
+
Required for nfs lock mounting.

`procinfo`::
Download from: ftp://ftp.cistron.nl/pub/people/00-OLD/svm/[]
+
Ancient proc monitoring program, last updated 2001-03-02!

`procinfo-ng`::
Web page: http://sourceforge.net/projects/procinfo-ng/[]
+
Updated proc monitoring program, updated recently, but doesn't look all
that great.

`Python`::
Web page: http://python.org[]
+
Python.

`screen`::
Web page: http://www.gnu.org/software/screen/[]
+
Needs an awkward patch to cross compile properly.

`strace`::
Web page: http://sourceforge.net/projects/strace/[]
+
Invaluable debugging tool.

`sudo`::
Web page: http://www.gratisoft.us/sudo/[]
+
Controled delegation of authority.

`testing`::
Example for components with local sources.


These components may be implemented at a later date:

`epics`::
This should probably be built separately.

`systemtap`::
Web page: http://sourceware.org/systemtap/[]
+
Alternative to strace?  Not yet investigated.

`tcp_wrappers`::
Web page: ftp://ftp.porcupine.org/pub/security/index.html[]
+
Provides libwrap, possibly wanted by nfs-utils.



The components below are appropriate for a basic system:

`busybox`:: Not optional, unless replaced by something equivalent.
`dropbear`:: Ssh server.
`ntp` or `openntpd`:: One of these is needed to provide NTP synchronisation.
`portmap`:: Required for NFS locking.


Toolkit Components
------------------

The following toolkit component is needed for building the root filesystem.

`fakeroot`::
Web page: http://fakeroot.alioth.debian.org/
+
Unfortunately, finding the right place to download `fakeroot` is remarkably
difficult.  It's part of Debian and Ubuntu, but the two distributions are very
different!
+
OpenEmbedded download from ftp://ftp.debian.org/debian/pool/main/f/fakeroot/[]
which seems the best reference.

The following toolkit components are needed for reproducible rootfs builds.

`autoconf`, `m4`::
Web pages:  http://www.gnu.org/software/autoconf/,
http://www.gnu.org/software/m4/ 
+
This is needed for rebuilding `./configure` after local patches to certain
components.

May well also need up to date versions of `automake` and `libtool`.




Notes on Cross Compiling
------------------------

Cross compiling various components ranges from easy through tricky to damn
near impossible, particularly as we also want to build out of tree.


For the following the standard `configure` script is well behaved and all that
is needed is something along these lines:

----
config:
	cd $(O)  &&  \
        $(srcdir)/configure CFLAGS='$(CFLAGS)' \
            --host=$(COMPILER_PREFIX) --build=$(BUILD_TYPE)
build:
	make -C $(O)
----

****
bash
dropbear
libpcap
nano
nfs-utils
ntp
openntpd
procinfo-ng
screen
strace
sudo
tcpdump
****

The following support cross compilation out of tree through their own
particular mechanisms:

****
busybox
mtd-utils
testing
****

Haven't figured this one out yet: i2c-tools


These ones are troublesome:

****
inotify-tools
lm_sensors
lshw
lsof
ntpclient
portmap
procinfo
Python
****


`inotify-tools`::

For this one have to make two patches before building:
+
--
. The test for `sys/inotify.h` needs to be defeated when cross compiling
. The include paths need to be modified to make includes work.
--
+ 
After patching aclocal and autoconf need to be run, but after that the
`./configure` script works correctly.


`lm_sensors`::

For this to work we need to construct a skeletal build directory structure
mirroring the original source structure and create links to all the subsiduary
make files.  The build needs `VPATH=$(srcdir)` and a number of other exports
to be set.


`lshw`::

Similarly, this needs links to makefiles in a skeleton of the source directory
tree and explicit specification of cross compilation programs, `VPATH` and an
extra includes definition.

`lsof`::

This one is utterly excruciating.

`ntpclient`::

No special configuration step required, but the build requires explicit
specification of the `VPATH` and `CC`.


`portmap`:: 

A special patch to the makefile is needed for dependency building to work.
The build step requires a number of symbols to be defined.


`procinfo`::

Much the same as `ntpclient`.

`Python`:: 

Oh my God.  No, it's horrible, it doesn't work.
+
Actually, it's not quite so bad, but certainly needs more work...
